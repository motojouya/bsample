
type User {
  id: ID!
  name: String!
  email: Email!
}

type Email {
  email: String!
  verified: Boolean!
}

input SendEmailInput {
  email: Email!
}

input VerifyEmailInput {
  register_session_id: ID
  email: Email!
  email_pin: Email!
}

input RegisterInput {
  register_session_id: ID!
  name: String!
  email: Email!
  password: String!
}

input LoginInput {
  id: ID!
  password: String!
}

input UserInput {
  name: String!
}

input EmailInput {
  email: String!
}

input PasswordInput {
  password: String!
}

type Mutation {
  sendEmail(input: SendEmailInput): String
  verifyEmail(input: VerifyEmailInput): Boolean
  register(input: RegisterInput): User
  login(input: LoginInput): User
  changeUserInformation(input: UserInput!): User
  changeEmail(input: EmailInput!): User
  changePassword(input: PasswordInput!): User
}

type Query {
  loginUser: User
}

export type ChangeEmail = (rdbSource: DataSource, loginUser: User, email: string): Promise<User | RecordNotFoundError>;
export type ChangePassword = (rdbSource: DataSource, loginUser: User, password: string) => Promise<User>;
export type ChangeUserInformation = (rdbSource: DataSource, loginUser: User, name: string) => Promise<User>;
export type GetUser = (rdbSource: DataSource, loginUser: User | null) => Promise<User | null>
export type Login = (rdbSource: DataSource, email: string, password: string) => Promise<User | null>;
export type Register = (
  rdbConnection: DataSource,
  register_session_id: string,
  name: string,
  email: string,
  password: string
) => Promise<User | RecordNotFoundError>;
export type SendEmail = (rdbConnection: DataSource, mailer: Mailer, loginUser: User | null, email: string) => Promise<string | RecordAlreadyExistError>;
export type VerifyEmail = (
  rdbSource: DataSource,
  loginUser: User,
  register_session_id: string,
  email: string,
  email_pin: string
) => Promise<null | RecordNotFoundError>;

// TODO 戻り値の型をこいつらとのunionに変更していく
type RecordAlreadyExistError {
  table: String!,
  data: any, // TODO ?
  message: String!,
}

type RecordNotFoundError {
  table: String!,
  keys: any, // TODO ?
  message: String!,
}

type AuthenticationError {
  userKey: String!,
  message: String!,
}
